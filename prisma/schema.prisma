// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Pastikan DATABASE_URL di .env.local Anda menunjuk ke POSTGRES_PRISMA_URL
  url      = env("DATABASE_URL")
}

// ==========================
// ENUMS
// ==========================

enum Role {
  CUSTOMER
  OWNER
  ADMIN
}

enum VehicleType {
  SUV
  MPV
  SEDAN
  HATCHBACK
  SPORT
  TRUCK
  MOTORCYCLE
  OTHER
}

enum TransmissionType {
  MANUAL
  AUTOMATIC
}

enum FuelType {
  GASOLINE
  DIESEL
  ELECTRIC
  HYBRID
}

enum PaymentMethod {
  BANK_TRANSFER_MANUAL
  BANK_TRANSFER_AUTOMATIC
  CREDIT_CARD
  E_WALLET
  CASH
}

enum OrderStatus {
  PENDING_REVIEW
  APPROVED
  REJECTED
  PAID
  ACTIVE
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum NotificationType {
  ORDER
  PAYMENT
  SYSTEM
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  OTHER
}

// ==========================
// MODELS
// ==========================

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  role              Role      @default(CUSTOMER)
  isVerifiedByAdmin Boolean   @default(false)
  phoneNumber       String?
  address           String?   @db.Text
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  accounts          Account[]
  sessions          Session[]
  vehicles          Vehicle[]
  orders            Order[]
  reviews           Review[]
  notifications     Notification[]
  auditLogs         AuditLog[]

  @@map("User")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

model Vehicle {
  id                Int              @id @default(autoincrement()) // <-- PERBAIKAN: Menggunakan Int ID (sesuai SQL SERIAL)
  ownerId           String
  name              String           // <-- PERBAIKAN: Menggunakan 'name' (sesuai SQL)
  slug              String           @unique // <-- BARU: Menambahkan 'slug' (sesuai SQL)
  description       String?          @db.Text
  type              VehicleType
  capacity          Int
  transmissionType  TransmissionType
  fuelType          FuelType
  dailyRate         Decimal          @db.Decimal(10, 2)
  lateFeePerDay     Decimal          @db.Decimal(10, 2)
  mainImageUrl      String?          // <-- PERBAIKAN: Menggunakan 'mainImageUrl' (sesuai SQL)
  isAvailable       Boolean          @default(true)
  licensePlate      String           @unique
  city              String
  address           String?          @db.Text
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  owner             User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  orders            Order[]
  reviews           Review[]

  @@map("Vehicle")
}

model Order {
  id              Int           @id @default(autoincrement())
  userId          String
  vehicleId       Int           // <-- PERBAIKAN: Menggunakan Int ID untuk vehicleId (sesuai Vehicle.id)
  driverId        Int?
  startDate       DateTime
  endDate         DateTime
  rentalDays      Int
  totalPrice      Decimal       @db.Decimal(10, 2)
  depositAmount   Decimal       @db.Decimal(10, 2)
  remainingAmount Decimal       @db.Decimal(10, 2)
  paymentMethod   PaymentMethod
  orderStatus     OrderStatus   @default(PENDING_REVIEW)
  adminNotes      String?       @db.Text
  pickupLocation  String        @db.Text
  returnLocation  String        @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle         Vehicle       @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  driver          Driver?       @relation(fields: [driverId], references: [id], onDelete: SetNull)
  payment         Payment[]

  @@index([userId])
  @@index([vehicleId])
  @@map("Order")
}

model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int
  amount        Decimal       @db.Decimal(10, 2)
  paymentDate   DateTime      @default(now())
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?       @unique
  notes         String?       @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  order         Order         @relation(fields: [orderId], references: [id])

  @@map("Payment")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    String
  vehicleId Int      // <-- PERBAIKAN: Menggunakan Int ID untuk vehicleId (sesuai Vehicle.id)
  rating    Int      @default(0) @db.SmallInt
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])

  @@unique([userId, vehicleId])
  @@index([userId])
  @@index([vehicleId])
  @@map("Review")
}

model Notification {
  id         Int            @id @default(autoincrement())
  userId     String
  title      String
  message    String         @db.Text
  type       NotificationType
  isRead     Boolean        @default(false)
  createdAt  DateTime       @default(now())

  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("Notification")
}

model AuditLog {
  id          Int         @id @default(autoincrement())
  userId      String?
  action      AuditAction
  description String      @db.Text
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime    @default(now())

  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("AuditLog")
}

model ReferralCode {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  discount    Decimal  @db.Decimal(5, 2)
  usageLimit  Int
  usedCount   Int      @default(0)
  validUntil  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ReferralCode")
}

model Driver {
  id             Int       @id @default(autoincrement())
  name           String
  phoneNumber    String
  gender         String
  address        String    @db.Text
  dailyRate      Decimal   @db.Decimal(10, 2)
  experienceYear Int
  isAvailable    Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  orders         Order[]

  @@map("Driver")
}
